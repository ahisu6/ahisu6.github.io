#+TITLE: Congratulations, my friend!

#+BEGIN_EXPORT html
<div class="engt">Congratulations, my friend!</div>
<div class="japt">おめでとう、我が友よ！</div>
#+END_EXPORT

[[https://github.com/ahisu6/ahisu6.github.io/edit/main/src/congratulations.org][Edit]]

[[file:../index.org][Home]]

-----
親友へ



おはよう～！

Well done my friend, you did it! @@html:<span class="ja">よくやった私の友人、あなたはそれをしました!</span>@@

I am extremely proud of what you have achieved. @@html:<span class="ja">私はあなたが成し遂げたことを非常に誇りに思っている。</span>@@

It has been a tremendously difficult year, but you did amazing. @@html:<span class="ja">とてつもなく困難な1年だったが、あなたはよくやった。</span>@@

I feel very proud. @@html:<span class="ja">私はとても誇りに感じている。</span>@@

I am proud to be your friend. @@html:<span class="ja">私はあなたの友人であることを誇りに思っている。</span>@@

Well done! @@html:<span class="ja">よくやったよ！</span>@@



友人より

#+BEGIN_EXPORT html
<style>
body {
  background-color: #141518;
  color: #e9e9cf;
}

.container {
  display: flex;
  align-content: center;
  justify-content: center;
  height: 100vh;
}

.btn {
  color: rgb(16,24,50);
  cursor: pointer;
  display: inline-block;
  letter-spacing: 0.075em;
  padding: .8em 1em;
  margin: auto 2em;
  position: fixed;
  align-self: center;
  text-transform: uppercase;
  border: 3px #00bcdd solid;
  border-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
  border-image-slice: 1 1 0 0;
  z-index: 1;
  box-shadow: -0.5em .5em transparentize(rgb(16,24,50),1);
  transform-origin: left bottom;
  transition: all 200ms ease-in-out;
}

.btn:before,
.btn:after {
  border: 3px #00bcdd solid;
  content: '';
  display: block;
  position: absolute;
  z-index: -1;
}

.btn:before {
  border-image: linear-gradient(45deg, #00bcdd 0%, adjust-hue(#00bcdd,10%) 100%);
  border-image-slice: 1 1 0 1;
  left: -0.59em; top: .15em;
  width: .31em;
  height: 100%;
  transform: skewY(-45deg);
}

.btn:after {
  border-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
  border-image-slice: 1 1 1 0;
  bottom: -0.61em; right: 0.16em;
  width: 100%;
  height: .31em;
  transform: skewX(-45deg);
}

.btn:hover {
  background-color: white;
  background-size: 90%;
  transform: translate(0.5em,-0.5em);
  box-shadow: -1em 1em .15em transparentize(rgb(16,24,50),.9);
}

.btn:hover:before {
  height: calc(100% - .13em);
  border-image-slice: 1;
  background-image: linear-gradient(45deg, #00bcdd 0%, adjust-hue(#00bcdd,10%) 100%);
}

.btn:hover:after {
  width: calc(100% - .13em);
  border-image-slice: 1;
  background-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
}

.cta {
  background-color: #00bcdd;
  background-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
  border-image: linear-gradient(45deg, lighten(#00bcdd,20%) 0%, lighten(#ff00ff,20%) 100%);
  border-image-slice: 1;
  color: white;
}

.cta:before {
  border-image-slice: 1;
  background-image: linear-gradient(45deg, #00bcdd 0%, adjust-hue(#00bcdd,10%) 100%);
  left: -0.75em;
  top: .15em;
}

.cta:after {
  border-image-slice: 1;
  background-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
  bottom: -0.75em;
  right: .15em;
}

.cta:hover {
  background: white;
  border-image: linear-gradient(45deg, #00bcdd 0%, #ff00ff 100%);
  border-image-slice: 1;
  color: rgb(16,24,50);
}

.cta:hover:before {
  height: 100%;
}

.cta:hover:after {
  width: 100%;
}

.bg {
  background: none;
  border: 3px solid rgb(16,24,50);
  color: rgb(16,24,50);
}

.bg:before,
.bg:after {
  background: rgb(16,24,50);
  border: 3px solid rgb(16,24,50);
}

.bg:hover {
  border-image: none;
}

.bg:hover:before,
.bg:hover:after {
  background: rgb(16,24,50);
}
</style>

<button id="button" class="btn cta">おめでとう、我が友よ！</button>
<canvas id="confetti"></canvas>

<script>
// Credit to https://github.com/loonywizard/js-confetti
// See the [[https://github.com/loonywizard/js-confetti/blob/main/LICENSE]] for the LICENSE
(() => {
    "use strict";

    function t(t) {
        return +t.replace(/px/, "")
    }

    function e(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
            n = Math.random() * (e - t) + t;
        return Math.floor(n * Math.pow(10, i)) / Math.pow(10, i)
    }

    function i(t) {
        return t[e(0, t.length)]
    }
    var n = ["#fcf403", "#62fc03", "#f4fc03", "#03e7fc", "#03fca5", "#a503fc", "#fc03ad", "#fc03c2"];

    function o(t, e) {
        var i = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(t);
            e && (n = n.filter((function(e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable
            }))), i.push.apply(i, n)
        }
        return i
    }

    function s(t) {
        for (var e = 1; e < arguments.length; e++) {
            var i = null != arguments[e] ? arguments[e] : {};
            e % 2 ? o(Object(i), !0).forEach((function(e) {
                a(t, e, i[e])
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : o(Object(i)).forEach((function(e) {
                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e))
            }))
        }
        return t
    }

    function a(t, e, i) {
        return e in t ? Object.defineProperty(t, e, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = i, t
    }

    function r(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)
        }
    }

    function c() {
        return Math.log(window.innerWidth) / Math.log(1920)
    }
    var h = function() {
        function t(n) {
            var o = n.initialPosition,
                a = n.direction,
                r = n.confettiRadius,
                h = n.confettiColors,
                f = n.emojies;
            ! function(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, t);
            var u = e(.9, 1.7, 3) * c();
            this.confettiSpeed = {
                x: u,
                y: u
            }, this.finalConfettiSpeedX = e(.2, .6, 3), this.rotationSpeed = f.length ? .01 : e(.03, .07, 3) * c(), this.dragForceCoefficient = e(5e-4, 9e-4, 6), this.radius = {
                x: r,
                y: r
            }, this.initialRadius = r, this.rotationAngle = "left" === a ? e(0, .2, 3) : e(-.2, 0, 3), this.emojiRotationAngle = e(0, 2 * Math.PI), this.radiusYUpdateDirection = "down";
            var l = "left" === a ? e(82, 15) * Math.PI / 180 : e(-15, -82) * Math.PI / 180;
            this.absCos = Math.abs(Math.cos(l)), this.absSin = Math.abs(Math.sin(l));
            var d = e(-150, 0),
                p = {
                    x: o.x + ("left" === a ? -d : d) * this.absCos,
                    y: o.y - d * this.absSin
                };
            this.currentPosition = s({}, p), this.initialPosition = s({}, p), this.color = f.length ? null : i(h), this.emoji = f.length ? i(f) : null, this.createdAt = (new Date).getTime(), this.direction = a
        }
        var n, o;
        return n = t, (o = [{
            key: "draw",
            value: function(t) {
                var e = this.currentPosition,
                    i = this.radius,
                    n = this.color,
                    o = this.emoji,
                    s = this.rotationAngle,
                    a = this.emojiRotationAngle,
                    r = window.devicePixelRatio;
                n ? (t.fillStyle = n, t.beginPath(), t.ellipse(e.x * r, e.y * r, i.x * r, i.y * r, s, 0, 2 * Math.PI), t.fill()) : o && (t.font = "".concat(i.x, "px serif"), t.save(), t.translate(r * e.x, r * e.y), t.rotate(a), t.textAlign = "center", t.fillText(o, 0, 0), t.restore())
            }
        }, {
            key: "updatePosition",
            value: function(t, e) {
                var i = this.confettiSpeed,
                    n = this.dragForceCoefficient,
                    o = this.finalConfettiSpeedX,
                    s = this.radiusYUpdateDirection,
                    a = this.rotationSpeed,
                    r = this.createdAt,
                    c = this.direction,
                    h = e - r;
                i.x > o && (this.confettiSpeed.x -= n * t), this.currentPosition.x += i.x * ("left" === c ? -this.absCos : this.absCos) * t, this.currentPosition.y = this.initialPosition.y - i.y * this.absSin * h + .00125 * Math.pow(h, 2) / 2, this.rotationSpeed -= this.emoji ? 1e-4 : 1e-5 * t, this.rotationSpeed < 0 && (this.rotationSpeed = 0), this.emoji ? this.emojiRotationAngle += this.rotationSpeed * t % (2 * Math.PI) : "down" === s ? (this.radius.y -= t * a, this.radius.y <= 0 && (this.radius.y = 0, this.radiusYUpdateDirection = "up")) : (this.radius.y += t * a, this.radius.y >= this.initialRadius && (this.radius.y = this.initialRadius, this.radiusYUpdateDirection = "down"))
            }
        }, {
            key: "getIsVisibleOnCanvas",
            value: function(t) {
                return this.currentPosition.y < t + 100
            }
        }]) && r(n.prototype, o), t
    }();

    function f(t) {
        var e = t.confettiRadius,
            i = void 0 === e ? t.emojies ? 80 : 6 : e,
            o = t.confettiesNumber,
            s = void 0 === o ? t.emojies ? 80 : 250 : o,
            a = t.confettiColors,
            r = void 0 === a ? n : a,
            c = t.emojies;
        return {
            confettiRadius: i,
            confettiesNumber: s,
            confettiColors: r,
            emojies: void 0 === c ? [] : c
        }
    }

    function u(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)
        }
    }
    const l = function() {
        function e() {
            var t;
            ! function(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, e), this.canvas = ((t = document.createElement("canvas")).style.position = "fixed", t.style.width = "100%", t.style.height = "100%", t.style.top = "0", t.style.left = "0", t.style.zIndex = "1000", t.style.pointerEvents = "none", document.body.appendChild(t), t), this.canvasContext = this.canvas.getContext("2d"), this.shapes = [], this.lastUpdated = (new Date).getTime(), this.iterationIndex = 0, this.loop = this.loop.bind(this), requestAnimationFrame(this.loop)
        }
        var i, n;
        return i = e, (n = [{
            key: "loop",
            value: function() {
                var e, i, n, o, s, a = this;
                e = this.canvas, i = window.devicePixelRatio, o = t((n = getComputedStyle(e)).getPropertyValue("width")), s = t(n.getPropertyValue("height")), e.setAttribute("width", (o * i).toString()), e.setAttribute("height", (s * i).toString());
                var r = (new Date).getTime(),
                    c = r - this.lastUpdated,
                    h = this.canvas.offsetHeight;
                this.shapes.forEach((function(t) {
                    t.updatePosition(c, r), t.draw(a.canvasContext)
                })), this.iterationIndex % 100 == 0 && (this.shapes = this.shapes.filter((function(t) {
                    return t.getIsVisibleOnCanvas(h)
                }))), this.lastUpdated = r, this.iterationIndex++, requestAnimationFrame(this.loop)
            }
        }, {
            key: "addConfetti",
            value: function() {
                for (var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = f(t), i = e.confettiRadius, n = e.confettiesNumber, o = e.confettiColors, s = e.emojies, a = 5 * window.innerHeight / 7, r = {
                        x: 0,
                        y: a
                    }, c = {
                        x: window.innerWidth,
                        y: a
                    }, u = 0; u < n / 2; u++) this.shapes.push(new h({
                    initialPosition: r,
                    direction: "right",
                    confettiRadius: i,
                    confettiColors: o,
                    emojies: s
                })), this.shapes.push(new h({
                    initialPosition: c,
                    direction: "left",
                    confettiRadius: i,
                    confettiColors: o,
                    emojies: s
                }))
            }
        }]) && u(i.prototype, n), e
    }();
    var d = [{}, {
        confettiRadius: 12,
        confettiesNumber: 100
    }, {
        emojies: ["🐳", "💙", "🐋", "🌸", "🍊", "🍋", "🐙"]
    }, {
        emojies: ["🌧", "🐙", "🐋", "🩺"]
    }, {
        emojies: ["💙"],
        confettiRadius: 100,
        confettiesNumber: 30
    }, {
        confettiColors: ["#ffbe0b", "#fb5607", "#ff006e", "#8338ec", "#3a86ff"],
        confettiRadius: 10,
        confettiesNumber: 150
    }, {
        confettiColors: ["#9b5de5", "#f15bb5", "#fee440", "#00bbf9", "#00f5d4"],
        confettiRadius: 6,
        confettiesNumber: 300
    }];
    window.onload = function() {
        var t = new l,
            e = document.getElementById("button");
        e && (e.addEventListener("click", (function() {
            t.addConfetti(i(d))
        })), setTimeout((function() {
            t.addConfetti()
        }), 1e3))
    }
})();
</script>


<!-- function startConfetti() { -->

  <!-- const canvas = document.getElementById("confetti"); -->
  <!-- const ctx = canvas.getContext("2d"); -->
  <!-- const colors = ["#ff0000", "#00ff00", "#0000ff", "#ffff00", "#00ffff"]; // Array of confetti colors -->
  <!-- const confettiCount = 100; // Number of confetti particles -->
  <!-- let colorIndex = 0; // Index to keep track of the current color -->
  <!-- let currentColor = colors[colorIndex]; // Current color value -->
  <!-- let nextColor = colors[(colorIndex + 1) % colors.length]; // Next color value -->
  <!-- let transitionStep = 0.01; // Step for transitioning colors -->
  <!-- let transitionProgress = 0; // Progress of transitioning colors -->

  <!-- // Function to generate a random number within a range -->
  <!-- function randomInRange(min, max) { -->
    <!-- return Math.random() * (max - min) + min; -->
  <!-- } -->

  <!-- // Set the canvas size to match the window -->
  <!-- canvas.width = window.innerWidth; -->
  <!-- canvas.height = window.innerHeight; -->


  <!-- // Function to create a confetti particle -->
  <!-- function createConfetti() { -->
    <!-- const x = randomInRange(0, canvas.width); -->
    <!-- const y = randomInRange(-canvas.height, 0); -->
    <!-- const color = colors[Math.floor(Math.random() * colors.length)]; -->
    <!-- const speed = randomInRange(2, 5); -->
    <!-- const angle = randomInRange(0, 2 * Math.PI); -->
    <!-- return { x, y, color, speed, angle }; -->
  <!-- } -->

  <!-- // Array to store the confetti particles -->
  <!-- const confetti = []; -->

  <!-- // Create the confetti particles -->
  <!-- for (let i = 0; i < confettiCount; i++) { -->
    <!-- confetti.push(createConfetti()); -->
  <!-- } -->

<!-- // Function to animate the confetti particles -->
<!-- function animateConfetti() { -->
  
  <!-- ctx.clearRect(0, 0, canvas.width, canvas.height); -->

  <!-- // Loop through each confetti particle -->
  <!-- for (let i = 0; i < confetti.length; i++) { -->
    <!-- const particle = confetti[i]; -->

    <!-- // Update the position of the particle -->
    <!-- particle.y += particle.speed; -->
    <!-- particle.x += Math.sin(particle.angle) * 2; -->

    <!-- // Draw the particle on the canvas -->
    <!-- ctx.beginPath(); -->
    <!-- ctx.arc(particle.x, particle.y, 5, 0, 2 * Math.PI); -->
    <!-- ctx.fillStyle = particle.color; -->
    <!-- ctx.fill(); -->
  <!-- } -->


  <!-- // Draw the word "Congratulations" -->
  <!-- ctx.font = "bold 80px monospace"; -->
  <!-- ctx.textAlign = "center"; -->
  <!-- ctx.textBaseline = "middle"; -->
  <!-- ctx.fillStyle = currentColor; // Use the current color -->
  <!-- ctx.fillText("あなたは試験で本当に", canvas.width / 2, canvas.height / 5); -->
  <!-- ctx.fillText(" 素晴らしい結果を残した。", canvas.width / 2, canvas.height / 3); -->
  <!-- ctx.fillText("よくやった！", canvas.width / 2, canvas.height / 1.8); -->

  <!-- // Transition between colors -->
  <!-- transitionProgress += transitionStep; -->
  <!-- if (transitionProgress >= 1) { -->
    <!-- colorIndex = (colorIndex + 1) % colors.length; // Update the color index to the next color in the array -->
    <!-- currentColor = nextColor; -->
    <!-- nextColor = colors[(colorIndex + 1) % colors.length]; -->
    <!-- transitionProgress = 0; -->
  <!-- } else { -->
    <!-- currentColor = transitionColor(currentColor, nextColor, transitionProgress); -->
  <!-- } -->

  <!-- // Check if all confetti particles have reached the bottom of the screen -->
  <!-- const allParticlesGone = confetti.every((particle) => particle.y >= canvas.height); -->

  <!-- if (allParticlesGone) { -->
    <!-- // Fade out the word "Congratulations" -->
    <!-- ctx.globalAlpha -= 0.01; // Reduce the alpha value by 0.01 to fade out gradually -->
    <!-- setTimeout(function() { -->
    <!-- location.reload(); // Reload the page to reset all JavaScript values -->
    <!-- }, 2000); -->
    
  <!-- } -->

  <!-- // Request animation frame to continue the animation -->
  <!-- requestAnimationFrame(animateConfetti); -->
<!-- } -->


  <!-- // Function to transition between colors smoothly -->
  <!-- function transitionColor(startColor, endColor, progress) { -->
    <!-- const startRGB = hexToRGB(startColor); -->
    <!-- const endRGB = hexToRGB(endColor); -->
    <!-- const transitionRGB = []; -->
    <!-- for (let i = 0; i < 3; i++) { -->
      <!-- transitionRGB[i] = Math.round(startRGB[i] + (endRGB[i] - startRGB[i]) * progress); -->
    <!-- } -->
    <!-- return RGBToHex(transitionRGB); -->
  <!-- } -->

  <!-- // Helper function to convert hex color to RGB array -->
  <!-- function hexToRGB(hex) { -->
    <!-- const r = parseInt(hex.slice(1, 3), 16); -->
    <!-- const g = parseInt(hex.slice(3, 5), 16); -->
    <!-- const b = parseInt(hex.slice(5, 7), 16); -->
    <!-- return [r, g, b]; -->
  <!-- } -->

  <!-- // Helper function to convert RGB array to hex color -->
  <!-- function RGBToHex(rgb) { -->
    <!-- return "#" + rgb.map((color) => color.toString(16).padStart(2, "0")).join(""); -->
  <!-- } -->

  <!-- // Start the confetti animation -->
  <!-- animateConfetti(); -->
<!-- } -->

#+END_EXPORT
