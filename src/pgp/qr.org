#+TITLE: QR Code

#+BEGIN_EXPORT html
<div class="engt">QR Code</div>
<div class="japt">ＱＲコード</div>
#+END_EXPORT

[[https://github.com/ahisu6/ahisu6.github.io/edit/main/src/pgp/qr.org][Edit]]

[[file:./index.org][Home]]

-----

#+BEGIN_EXPORT html
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ahisu6.github.io/assets/js/qrcode.js"></script>
    <script src="https://ahisu6.github.io/assets/js/jsQR.min.js"></script>
    <style>

h2 { background-color: #f3f3e3; color: #152515; text-align: center; }

.container {
all: initial;
overflow-y: initial;
overflow-x: initial;
font-size: initial;
line-height: initial;
color: initial;
overflow-wrap: initial;
color: inherit;
word-wrap: inherit;
line-height: inherit;
font-size: inherit;
overflow: hidden;
}
.input-group {
margin: 10px 0;
margin: 1em 0;
padding: 0.5em;
border-radius: 0.5em;
}

#encode {
background: #003b58;
}

#decodetext {
background: #4c005c;
}

#decodeqr{
background: #3b4301;
}

textarea {
width: 300px;
height: 100px;
}
#qrcode {
margin-top: 20px;
}
pre {
white-space: pre-wrap; /* CSS3 */
word-wrap: break-word; /* IE 5.5-7 */
overflow-wrap: break-word; /* CSS3 */
}

button { display: inline-block; padding: 1.3em 2em; font-size: inherit; text-align: center; color: whitesmoke; background-color: #2F3247; border: 0.4em solid #B9C1DA; } button.copy { background-color: #DD5FA7; color: whitesmoke; border: 0.4em solid #DAB4E1; font-size: 0.8em; border-radius: 2em; } button:hover { color: #2F3247 !important; border: 0.4em solid #B9C1DA !important; background-color: #B9C1DA !important; }

    </style>
</head>
<body>
    <div class="container">
        <div id="encode" class="input-group">
            <h2>エンコードする</h2>
            <label for="textInput">テキストを入力する：</label><br>
            <textarea id="textInput"></textarea><br>
            <label for="errorCorrection">エラー訂正レベル（ビット）：</label>
            <select id="errorCorrection">
                <option value="L" selected>Low (23648)</option>
                <option value="M">Medium (18672)</option>
                <option value="Q">Quartile (13328)</option>
                <option value="H">High (10208)</option>
            </select><br>
            <button onclick="convertToBase64AndQR()">ＱＲコード作成</button>
            <p id="bitCount"></p>
            <div id="qrcode"></div>
        </div>
<hr>
        <div id="decodetext" class="input-group">
            <h2>デコード</h2>
            <label for="base64Input">Ｂａｓｅ６４を貼り付ける：</label><br>
            <textarea id="base64Input"></textarea><br>
            <button onclick="decodeBase64()">Ｂａｓｅ６４を解読する</button><br>
            <button class="copy" onclick="copy('decodedText')">結果をコピーする！</button>
        </div>
<hr>
        <div id="decodeqr" class="input-group">
            <h2>ＱＲコードの画像をアップロードする</h2>
            <label for="qrInput">ＱＲコード画像をアップロードする：</label><br>
            <input type="file" id="qrInput" accept="image/*" onchange="decodeQRCode()"><br>
            <button onclick="decodeBase64FromQRCode()">ＱＲコードからＢａｓｅ６４を解読する</button><br>
            <button class="copy" onclick="copy('decodedText')">結果をコピーする！</button>
            <pre id="decodedText"></pre>
        </div>
    </div>

    <script>
        function copy(id1, id2 = null) {
            const text1 = document.getElementById(id1).innerText;
            const text2 = id2 ? document.getElementById(id2).innerText : '';
            const combinedText = text1 + (text2 ? "\n\n" + text2 : '');
            navigator.clipboard.writeText(combinedText);
        }

        function convertToBase64AndQR() {
            const textInput = document.getElementById('textInput').value;
            const base64 = btoa(unescape(encodeURIComponent(textInput)));
            const bitCount = (base64.length * 8)+20; // Need to add 20 because that's what the QR JS is doing for some reason...
            document.getElementById('bitCount').innerText = `合計ビット数：${bitCount}`;

            const errorCorrection = document.getElementById('errorCorrection').value;
            const qr = qrcode(40, errorCorrection); // Uses version 40 for maximum capacity.
            qr.addData(base64);
            qr.make();

            document.getElementById('qrcode').innerHTML = qr.createImgTag(5);
        }

        function decodeBase64() {
            const base64Input = document.getElementById('base64Input').value;
            try {
                const decodedText = decodeURIComponent(escape(atob(base64Input)));
                document.getElementById('decodedText').innerText = `解読されたテキスト：\n${decodedText}`;
            } catch (error) {
                document.getElementById('decodedText').innerText = 'エラー：無効なＢａｓｅ６４入力。';
            }
        }

        function decodeQRCode() {
            const fileInput = document.getElementById('qrInput');
            const file = fileInput.files[0];
            if (!file) {
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    context.drawImage(img, 0, 0);
                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, canvas.width, canvas.height);
                    if (code) {
                        document.getElementById('decodedText').innerText = `ＱＲコードからデコードされたテキスト：\n${code.data}`;
                    } else {
                        document.getElementById('decodedText').innerText = 'エラー：ＱＲコードが見つかりません。';
                    }
                };
                img.src = event.target.result;
            };
            reader.readAsDataURL(file);
        }

        function decodeBase64FromQRCode() {
            const fileInput = document.getElementById('qrInput');
            const file = fileInput.files[0];
            if (!file) {
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    context.drawImage(img, 0, 0);
                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, canvas.width, canvas.height);
                    if (code) {
                        try {
                            const decodedText = decodeURIComponent(escape(atob(code.data)));
                            document.getElementById('decodedText').innerText = `ＱＲコードからデコードされたテキスト：\n${decodedText}`;
                        } catch (error) {
                            document.getElementById('decodedText').innerText = 'エラー：ＱＲコードのＢａｓｅ６４が無効です。';
                        }
                    } else {
                        document.getElementById('decodedText').innerText = 'エラー：ＱＲコードが見つかりません。';
                    }
                };
                img.src = event.target.result;
            };
            reader.readAsDataURL(file);
        }
    </script>
</body>




#+END_EXPORT
