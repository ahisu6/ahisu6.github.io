#+TITLE: Pretty Good Privacy
#+HTML_HEAD: <style type="text/css">body {background: #0D0D0D;color: #ffffff;margin: 0;padding: 0;}.container {width: 50%;margin: auto;overflow: hidden;}h2 { background-color: #f3f3e3; color: #152515; text-align: center;}.engt { color: #8ffa89; background-color: transparent; font-weight: bolder; font-size: 1.5em; text-align: center;}.japt { color: #89b7fa; background-color: transparent; font-weight: bolder; font-size: 2em; text-align: center;}section {margin: 10px 0;padding: 10px;border-radius: 3px;}#key-generation {background: #3b3380;}#encryption {background: #004080;}#decryption {background: #831628;}#fingerprint {background: #004d2a;}label {display: block;margin-top: 7px;}.optional {background: darkgrey;}input:not(#verify-signature):not(#sign-message), textarea {width: 100%;padding: 5px;margin-top: 3px;margin-bottom: 10px;border-radius: 3px;box-sizing: border-box;}label {display: inline;}button {display: inline-block;padding: 13px 20px;font-size: 20px;text-align: center;color: #305869;background-color: #cbdee7;border-radius: 15px;}button.copy {font-size: 15px;border-radius: 25px; margin: 0 10px;}button:hover {background-color: #ffff1a}pre {background: #16171d;padding: 5px;border-radius: 3px;overflow: auto;font-size: 14px;color: #8ffa89;}@media (max-width: 500px) { }</style>

#+BEGIN_EXPORT html
<div class="engt">Pretty Good Privacy</div>
<div class="japt">プリティ・グッド・プライバシー</div>
#+END_EXPORT

[[https://github.com/ahisu6/ahisu6.github.io/edit/main/src/pgp.org][Edit]]


[[file:./index.org][Home]]

-----

#+BEGIN_EXPORT html

<head>

<script src="https://ahisu6.github.io/assets/js/openpgp.min.js"></script>

<script>


function saveKey(elementId) {
const textToSave = document.getElementById(elementId).innerText;
const blob = new Blob([textToSave], { type: 'text/plain' });
const link = document.createElement('a');
link.href = URL.createObjectURL(blob);
link.download = `${elementId}.txt`;
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}

function copy(id1, id2 = null) {
    const text1 = document.getElementById(id1).innerText;
    const text2 = id2 ? document.getElementById(id2).innerText : '';
    const combinedText = text1 + (text2 ? "\n\n" + text2 : '');
    navigator.clipboard.writeText(combinedText);
}

document.addEventListener('DOMContentLoaded', () => {
const generateKeysButton = document.getElementById('generate-keys');
const encryptMessageButton = document.getElementById('encrypt-message');
const decryptMessageButton = document.getElementById('decrypt-message');
const findFingerprintButton = document.getElementById('find-fingerprint');
const publicKeyTextArea = document.getElementById('public-key');
const publicKeyVerifyArea = document.getElementById('public-key-verify');

const myPublicPGP = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
8g==
=VbdY
-----END PGP PUBLIC KEY BLOCK-----`;


publicKeyTextArea.value = myPublicPGP;
publicKeyVerifyArea.value = myPublicPGP;

function toggleVisibility(checkboxId, elementId) {
const checkbox = document.getElementById(checkboxId);
const element = document.getElementById(elementId);

element.style.display = 'none';

checkbox.addEventListener('change', () => {
element.style.display = checkbox.checked ? 'block' : 'none';
});
}
toggleVisibility('sign-message', 'hide-sign');
// toggleVisibility('verify-signature', 'hide-verify');

generateKeysButton.addEventListener('click', async () => {
try {
let name = document.getElementById('name').value;
const passphrase = document.getElementById('passphrase').value;

const currentDate = new Date();
currentDate.setDate(currentDate.getDate() + 365);
const formattedDate = currentDate.toISOString().split('T')[0];

name = `${name}, expires on ${formattedDate}`;

const options = {
userIDs: [{ name }],
type: 'rsa',
rsaBits: 4096,
passphrase
};

const { privateKey, publicKey } = await openpgp.generateKey(options);

document.getElementById('generated-public-key').textContent = `${publicKey}`;
document.getElementById('generated-private-key').textContent = `${privateKey}`;
} catch (error) {
document.getElementById('generated-public-key').innerHTML = `何かが間違っていた。修正しますので、エラーを送ってください。<br>${error.message}`;
}
});

encryptMessageButton.addEventListener('click', async () => {
try {
const publicKeyArmored = document.getElementById('public-key').value;
const privateKeyArmored = document.getElementById('private-key-sign').value;
const passphrase = document.getElementById('sign-passphrase').value;
const message = document.getElementById('message-to-encrypt').value;
const signMessage = document.getElementById('sign-message').checked;

const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

const options = {
message: await openpgp.createMessage({ text: message }),
encryptionKeys: publicKey
};

if (signMessage) {
const privateKey = await openpgp.decryptKey({
privateKey: await openpgp.readPrivateKey({ armoredKey: privateKeyArmored }),
passphrase
});
options.signingKeys = privateKey;
}

const encryptedMessage = await openpgp.encrypt(options);

document.getElementById('encrypted-message').textContent = encryptedMessage;
} catch (error) {
document.getElementById('encrypted-message').innerHTML = `何かが間違っていた。修正しますので、エラーを送ってください。<br>${error.message}`;
}
});

decryptMessageButton.addEventListener('click', async () => {
try {
const privateKeyArmored = document.getElementById('private-key').value;
const passphrase = document.getElementById('decrypt-passphrase').value;
const messageToDecrypt = document.getElementById('message-to-decrypt').value;
const publicKeyArmored = document.getElementById('public-key-verify').value;
const verifySignature = document.getElementById('verify-signature').checked;

const privateKey = await openpgp.decryptKey({
privateKey: await openpgp.readPrivateKey({ armoredKey: privateKeyArmored }),
passphrase
});

const options = {
message: await openpgp.readMessage({ armoredMessage: messageToDecrypt }),
decryptionKeys: privateKey
};

if (verifySignature) {
const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });
options.verificationKeys = publicKey;
}

const decryptedMessage = await openpgp.decrypt(options);

if (verifySignature) {
const { verified } = decryptedMessage.signatures[0];
try {
await verified;
document.getElementById('signature-status').textContent = 'やった！署名は有効です。これは本当に私です！';
} catch (e) {
document.getElementById('signature-status').textContent = '署名が無効です。これは私ではありません。注意してください、誰かが私になりすましているかもしれません！';
}
}

document.getElementById('decrypted-message').textContent = decryptedMessage.data;
} catch (error) {
document.getElementById('decrypted-message').innerHTML = `何かが間違っていた。修正しますので、エラーを送ってください。<br>${error.message}`;
}
});

findFingerprintButton.addEventListener('click', async () => {
const keyArmored = document.getElementById('key-to-fingerprint').value;

try {
const key = await openpgp.readKey({ armoredKey: keyArmored });
const fingerprint = key.getFingerprint();
document.getElementById('fingerprint-result').textContent = `Fingerprint: ${fingerprint}`;
} catch (error) {
document.getElementById('fingerprint-result').innerHTML = `何かが間違っていた。修正しますので、エラーを送ってください。<br>${error.message}`;
}
});
});
</script>
</head>
<body>
<div class="container">


<section id="encryption">
<h2>メッセージの暗号化と署名</h2>
<label for="public-key">私のＰＵＢＬＩＣキー（これを修正する必要はない。私がすでに記入しておいたから！）：</label>
<textarea id="public-key" rows="5" placeholder="私のＰＵＢＬＩＣキーをここに入れてください。"></textarea>

<p>
<input type="checkbox" id="sign-message">
<label for="sign-message">あなたのＰＲＩＶＡＴＥキーでメッセージに署名しますか？</label>
</p>

<div id="hide-sign">
<label for="private-key-sign">あなたのＰＲＩＶＡＴＥキー：</label>
<textarea class="optional" id="private-key-sign" rows="5" placeholder="あなたの特別な秘密署名をメッセージに入れたい場合（そうすれば、私はこのメッセージが本当にあなたからのものだとわかる）、ここにあなたのＰＲＩＶＡＴＥキーを入れる必要がある。"></textarea>
<label for="sign-passphrase">パスワード：</label>
<input class="optional" type="password" id="sign-passphrase" placeholder="前のフィールドにあなたのＰＲＩＶＡＴＥキーを入力した場合は、ここにパスワードを入力する必要があります。">
</div>

<label for="message-to-encrypt">メッセージ：</label>
<textarea id="message-to-encrypt" rows="5" placeholder="暗号化したいメッセージを書く。"></textarea>
<button id="encrypt-message">クリックして暗号化する</button>
<button class="copy" onclick="copy('encrypted-message')">結果をコピーする！</button>
<pre id="encrypted-message"></pre>
</section>






<p><hr></p>
<section id="decryption">
<h2>メッセージの解読と検証</h2>
<label for="private-key">あなたのＰＲＩＶＡＴＥキー：</label>
<textarea id="private-key" rows="5" placeholder="あなたのＰＲＩＶＡＴＥキーを入力します。"></textarea>
<label for="decrypt-passphrase">パスワード：</label>
<input type="password" id="decrypt-passphrase" placeholder="パスワードを入力してください。">
<label for="message-to-decrypt">暗号化されたメッセージ：</label>
<textarea id="message-to-decrypt" rows="5" placeholder="あなたに送られた暗号化されたメッセージを入力してください。"></textarea>

<p>
<input class="optional" type="checkbox" id="verify-signature" checked>
<label for="verify-signature">メッセージを送ったのが本当に私であることを確認するために、メッセージの署名を確認したいですか？このボックスのチェックを外す理由はない。常にチェックを入れておいてください！</label>
</p>

<div id="hide-verify">
<label for="public-key-verify">私のＰＵＢＬＩＣキー（これを修正する必要はない。私がすでに記入しておいたから！）：</label>
<textarea class="optional" id="public-key-verify" rows="5" placeholder="私のＰＵＢＬＩＣキーを入力してください。"></textarea>
</div>
<button id="decrypt-message">クリックして復号化する</button>
<button class="copy" onclick="copy('decrypted-message')">結果をコピーする！</button>
<pre id="decrypted-message"></pre>
<pre id="signature-status"></pre>
</section>






<p><hr></p>
<section id="fingerprint">
<h2>キーの指紋を見つける</h2>
<label for="key-to-fingerprint">キーーーーーーーー：</label>
<textarea id="key-to-fingerprint" rows="5" placeholder="署名を確認したいキーを入力してください。これは、お互いが正しい鍵を送ったかどうかを確認するために使われる。"></textarea>
<button id="find-fingerprint">クリックして指紋を見つける</button>
<button class="copy" onclick="copy('fingerprint-result')">結果をコピーする！</button>
<pre id="fingerprint-result"></pre>
</section>






<p><hr></p>
<section id="key-generation">
<h2>キーを生成する</h2>
<label for="name">お名前：</label>
<input type="text" id="name" placeholder="お名前をご記入ください（本名である必要はありません）。">
<label for="passphrase">パスワード（このパスワードを忘れると、私のメッセージを読むことができなくなります！）：</label>
<input type="password" id="passphrase" placeholder="パスフレーズを入力する。忘れないようにしてください！">
<button id="generate-keys">キーを生成する</button><br>

<div style="display: flex; justify-content: space-between; align-items: center;">
<button class="copy" style="order: 3;" onclick="copy('generated-public-key')">ＰＵＢＬＩＣキーをコピーする</button>
<button class="copy" style="order: 2; background-color: #e60000; color: white;" onclick="copy('generated-private-key', 'generated-public-key')">両方のキーをコピーして、インポートできるようにする</button>
<button class="copy" style="order: 1;" onclick="copy('generated-private-key')">ＰＲＩＶＡＴＥキーをコピーする</button>
</div>

<!-- <button style="flex: 1; background-color: #4d6600; color: white; font-size: 20px; margin: 50px; padding: 5px;" onclick="saveKey('generated-public-key')">あなたのＰＵＢＬＩＣキーをテキストファイルとしてコンピュータに保存します。</button><br> -->
<!-- <button style="flex: 1; background-color: #e60000; color: white; font-size: 20px; margin: 50px; padding: 5px;" onclick="saveKey('generated-private-key')">あなたのＰＲＩＶＡＴＥキーをテキストファイルとしてコンピュータに保存します。</button><br> -->

<div style="display: flex;">
<pre style="flex: 1; margin: 10px; padding: 10px;">ＰＵＢＬＩＣキー（これを私に送ってください）：</pre>
<pre style="flex: 1; margin: 10px; padding: 10px;">ＰＲＩＶＡＴＥトキー（この鍵は誰にも送らないで
ください。この鍵は秘密です。これを極めて安全か
つ厳重に保管すること！もし誰かがこの鍵を盗めば
、私たちの秘密のメッセージをすべて読むことがで
きる！）：</pre>
</div>

<div style="display: flex;">
<pre style="flex: 1; margin: 10px; padding: 10px;" id="generated-public-key"></pre>
<pre style="flex: 1; margin: 10px; padding: 10px;" id="generated-private-key"></pre>
</div>
</section>

</div>
</body>

#+END_EXPORT
