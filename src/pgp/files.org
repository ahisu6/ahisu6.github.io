#+TITLE: File Encryption
#+HTML_HEAD: <style type="text/css">body { background-color: #22242d; color: #e9e9cf; word-wrap: break-word; max-width: 36em; margin: 0 auto; line-height: 1.5; padding: 0; font-size: 1.5em; } a { background-color: #ff47b1; color: #f3f3e3; font-family: monospace; font-weight: bold; text-transform: uppercase; } a:hover { background-color: #f3f3e3; color: #ff47b1; } .container { all: initial; color: inherit; word-wrap: inherit; line-height: inherit; font-size: inherit; overflow: hidden; } h2 { background-color: #f3f3e3; color: #152515; text-align: center; } .engt { color: #8ffa89; background-color: transparent; font-weight: bolder; font-size: 1.5em; text-align: center; } .japt { color: #89b7fa; background-color: transparent; font-weight: bolder; font-size: 2em; text-align: center; } section { margin: 1em 0; padding: 0.5em; border-radius: 0.5em; } #encryption { background: #800080; } #decryption { background: #006633; } label { display: inline; margin-top: 0.8em; } .optional { background: darkgrey; } input:not(#verifyCheckbox):not(#signCheckbox), textarea { width: 100%; padding: 0.5em; margin-top: 0.3em; margin-bottom: 1em; border-radius: 0.3em; box-sizing: border-box; } button { display: inline-block; padding: 1.3em 2em; font-size: inherit; text-align: center; color: whitesmoke; background-color: #2F3247; border: 0.4em solid #B9C1DA; } button.copy { background-color: #DD5FA7; color: whitesmoke; border: 0.4em solid #DAB4E1; font-size: 0.8em; border-radius: 2em; } button:hover { color: #2F3247 !important; border: 0.4em solid #B9C1DA !important; background-color: #B9C1DA !important; } pre { background: #16171d; padding: 5px; border-radius: 3px; overflow: auto; font-size: 14px; color: #8ffa89; } @media (max-width: 500px) { body { padding: 1em; font-size: 1em; } button { padding: 0.4em 0.4em; border: 0.1em solid #B9C1DA; } button.copy { background-color: #DD5FA7; color: whitesmoke; border: 0.1em solid #DAB4E1; font-size: 0.9em; border-radius: 2em; } button:hover { color: #2F3247 !important; border: 0.1em solid #B9C1DA !important; background-color: #B9C1DA !important; } }</style>

#+BEGIN_EXPORT html
<div class="engt">File Encryption</div>
<div class="japt">ファイルの暗号化</div>
#+END_EXPORT

[[https://github.com/ahisu6/ahisu6.github.io/edit/main/src/pgp/files.org][Edit]]

[[file:./index.org][Home]]

[[file:./text.org][<< プレーンテキスト]]

-----

#+BEGIN_EXPORT html
<head>

<script src="https://ahisu6.github.io/assets/js/openpgp.min.js"></script>

<script>

function copy(id1, id2 = null) {
const text1 = document.getElementById(id1).innerText;
const text2 = id2 ? document.getElementById(id2).innerText : '';
const combinedText = text1 + (text2 ? "\n\n" + text2 : '');
navigator.clipboard.writeText(combinedText);
}


// Remove PGP Public key if found in textarea
function removePGPBlock(PrivateKeyField) {
const textArea = document.getElementById(PrivateKeyField);
let content = textArea.value;

// Regex to match content between PGP block markers
const pgpBlockRegex = /-----BEGIN PGP PUBLIC KEY BLOCK-----[\s\S]*?-----END PGP PUBLIC KEY BLOCK-----/g;

// Replace matched content with an empty string
content = content.replace(pgpBlockRegex, '');

// Update the text area with the modified content
textArea.value = content;
copy('errorDisplay');
}


document.addEventListener('DOMContentLoaded', () => {


const myPublicPGP = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=+zm1
-----END PGP PUBLIC KEY BLOCK-----`;

const publicKeyVerifyArea = document.getElementById('verifyPublicKey');
publicKeyVerifyArea.value = myPublicPGP;




const yourPublicPGP = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
bJ/tlPyQJtSnoRH9iyQ=
=+IqY
-----END PGP PUBLIC KEY BLOCK-----`;



const errorDisplay = document.getElementById('errorDisplay');
const copyButton = document.querySelector('.copy');

function updateButtonVisibility() {
if (errorDisplay.textContent.trim() !== "") {
copyButton.style.display = 'inline-block';
} else {
copyButton.style.display = 'none';
}
}

// Call the function initially to set the correct visibility when the page loads
updateButtonVisibility();

// Optionally, if the content of the pre element can change dynamically, observe those changes
const observer = new MutationObserver(updateButtonVisibility);
observer.observe(errorDisplay, { childList: true, subtree: true, characterData: true });





const toggleDisplay = (element, condition) => {
element.style.display = condition ? 'block' : 'none';
};

const toggleSignOptions = () => toggleDisplay(document.getElementById('signOptions'), document.getElementById('signCheckbox').checked);
const checkVerifyOptions = () => {
const verifyCheckbox = document.getElementById('verifyCheckbox');
toggleDisplay(document.getElementById('verifyOptions'), verifyCheckbox.checked);
toggleDisplay(document.getElementById('verifyPublicKey'), verifyCheckbox.checked);
};

const readFileAsUint8Array = file => new Promise((resolve, reject) => {
const reader = new FileReader();
reader.onload = () => resolve(new Uint8Array(reader.result));
reader.onerror = reject;
reader.readAsArrayBuffer(file);
});

const getKey = async (armoredKey, type = 'public') => {
return type === 'public' ? openpgp.readKey({ armoredKey }) : openpgp.readPrivateKey({ armoredKey });
};

const getDecryptedKey = async (armoredKey, passphrase) => {
return openpgp.decryptKey({
privateKey: await getKey(armoredKey, 'private'),
passphrase
});
};

const createDownloadLink = (blob, fileName) => {
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = fileName;
document.body.appendChild(a);
a.click();
document.body.removeChild(a);
};

const displayError = (message) => {
const errorElement = document.getElementById('errorDisplay');
errorElement.textContent = `何かが間違っていた。修正しますので、エラーを送ってください。<br> ${message}`;
};

const encryptFile = async () => {
try {
const fileInput = document.getElementById('fileInput');
if (!fileInput.files.length) return alert('まずファイルを選択してください。');

const file = fileInput.files[0];
const fileUint8Array = await readFileAsUint8Array(file);
const publicKeys = await Promise.all([myPublicPGP, yourPublicPGP].map(key => getKey(key)));

let privateKey = null;
if (document.getElementById('signCheckbox').checked) {
privateKey = await getDecryptedKey(document.getElementById('privateKey').value, document.getElementById('passphrase').value);
}

const encrypted = await openpgp.encrypt({
message: await openpgp.createMessage({ binary: fileUint8Array }),
encryptionKeys: publicKeys,
signingKeys: privateKey ? [privateKey] : undefined
});

createDownloadLink(new Blob([encrypted], { type: 'application/pgp-encrypted' }), `${file.name}.asc`);
} catch (error) {
displayError(error.message);
}
};

const decryptFile = async () => {
try {
const ascFileInput = document.getElementById('ascFileInput');
if (!ascFileInput.files.length) return alert('まず「.asc」ファイルを選択してください。');

const fileText = await ascFileInput.files[0].text();
const privateKey = await getDecryptedKey(
document.getElementById('decryptPrivateKey').value,
document.getElementById('decryptPassphrase').value
);
const message = await openpgp.readMessage({ armoredMessage: fileText });

let publicKey = null;
if (document.getElementById('verifyCheckbox').checked) {
publicKey = await getKey(document.getElementById('verifyPublicKey').value);
}

const { data: decrypted, signatures } = await openpgp.decrypt({
message,
decryptionKeys: privateKey,
verificationKeys: publicKey ? [publicKey] : undefined,
format: 'binary'
});


if (publicKey) {
try {
const verified = await signatures[0].verified;
document.getElementById('signature-status').textContent = verified ? 'やった！署名は有効です。これは本当に私です！' : '署名が無効です。これは私ではありません。注意してください、誰かが私になりすましているかもしれません！';
} catch (e) {
document.getElementById('signature-status').textContent = '署名が無効です。これは私ではありません。注意してください、誰かが私になりすましているかもしれません！';
}
}

const mimeType = getMimeType(decrypted);
const extension = prompt(`推奨されるファイル拡張子は「.${getExtensionFromMimeType(mimeType)}」。お望みなら、どんな拡張子でも書くことができる：`, getExtensionFromMimeType(mimeType)) || getExtensionFromMimeType(mimeType);
const fileName = prompt('復号化したファイルの名前を入力します：', `decrypted.${extension}`) || `decrypted.${extension}`;

if (mimeType.startsWith('image/') || mimeType.startsWith('audio/') || mimeType.startsWith('video/') || extension === 'bin') {
const displayChoice = confirm('ファイルをダウンロードする代わりに表示したい場合は、「ＯＫ」を押してください。画像、音声、動画を期待している場合は、「ＯＫ」をクリックすることをお勧めします。そうでない場合は、「ＣＡＮＣＥＬ」をクリックしてください。');

if (displayChoice) {
const container = document.getElementById('fileContainer');
container.innerHTML = ''; // Clear the container before appending new content

const blob = new Blob([decrypted], { type: mimeType });
const url = URL.createObjectURL(blob);

if (mimeType.startsWith('image/')) {
const img = document.createElement('img');
img.src = url;
container.appendChild(img);
} else if (mimeType.startsWith('video/')) {
const video = document.createElement('video');
video.controls = true;
video.src = url;
container.appendChild(video);
} else if (mimeType.startsWith('audio/')) {
const audio = document.createElement('audio');
audio.controls = true;
audio.src = url;
container.appendChild(audio);
} else if (extension === 'bin') {


const reader = new FileReader();
reader.onload = function (evt) {
const pre = document.createElement('pre');
pre.textContent = evt.target.result;
pre.style.wordWrap = 'break-word';
pre.style.whiteSpace = 'pre-wrap';
container.appendChild(pre);
};
reader.readAsText(blob, 'UTF-8');


const iframe = document.createElement('iframe');
iframe.src = url;
container.appendChild(iframe);
}
} else {
createDownloadLink(new Blob([decrypted], { type: mimeType }), fileName);
}
} else {
createDownloadLink(new Blob([decrypted], { type: mimeType }), fileName);
}
} catch (error) {
displayError(error.message);
}
};

const getMimeType = data => {
const mimeHeaders = {
'ffd8ff': 'image/jpeg',
'ffd8ffe0': 'image/jpeg',
'ffd8ffe1': 'image/jpeg',
'ffd8ffe2': 'image/jpeg',
'ffd8ffe3': 'image/jpeg',
'ffd8ffe8': 'image/jpeg',
'89504e47': 'image/png',
'25504446': 'application/pdf',
'504b0304': 'application/zip',
'00000018': 'video/mp4',
'00000020': 'video/mp4',
'494433': 'audio/mpeg',
'fff1': 'audio/aac',
'fff9': 'audio/aac',
'52494646': 'audio/wav'
};

const hex = Array.from(new Uint8Array(data.slice(0, 4))).map(b => b.toString(16).padStart(2, '0')).join('');
return mimeHeaders[hex] || 'application/octet-stream';
};

const getExtensionFromMimeType = mimeType => ({
'text/plain': 'txt',
'application/pdf': 'pdf',
'image/jpeg': 'jpg',
'image/png': 'png',
'application/zip': 'zip',
'video/mp4': 'mp4',
'audio/mpeg': 'mp3',
'audio/aac': 'aac',
'audio/wav': 'wav',
'audio/mp4': 'm4a'
}[mimeType] || 'bin');

document.getElementById('encryptButton').addEventListener('click', encryptFile);
document.getElementById('decryptButton').addEventListener('click', decryptFile);
document.getElementById('signCheckbox').addEventListener('change', toggleSignOptions);
document.getElementById('verifyCheckbox').addEventListener('change', checkVerifyOptions);

checkVerifyOptions();
toggleSignOptions();

});





</script>
</head>
<body>
<div class="container">

<pre id="errorDisplay"></pre>
<button class="copy" style="display: none;" onclick="copy('errorDisplay')">Copy error</button>





<section id="encryption">
<h2>ファイルの暗号化と署名</h2>
<input type="file" id="fileInput" />
<br>
<input type="checkbox" id="signCheckbox">
<label for="signCheckbox">あなたのＰＲＩＶＡＴＥキーでメッセージに署名しますか？</label>
<br>
<div id="signOptions" style="display: none;">
<textarea class="optional" id="privateKey" placeholder="あなたの特別な秘密署名をメッセージに入れたい場合（そうすれば、私はこのメッセージが本当にあなたからのものだとわかる）、ここにあなたのＰＲＩＶＡＴＥキーを入れる必要がある。"></textarea>
<br>
<input class="optional" type="password" id="passphrase" placeholder="前のフィールドにあなたのＰＲＩＶＡＴＥキーを入力した場合は、ここにパスワードを入力する必要があります。">
</div>
<br>
<button id="encryptButton" onclick="removePGPBlock('privateKey')">クリックして暗号化する</button>
</section>






<p><hr></p>
<section id="decryption">
<h2>ファイルの解読と検証</h2>
<input type="file" id="ascFileInput" />
<br>
<textarea id="decryptPrivateKey" placeholder="あなたのＰＲＩＶＡＴＥキーを入力します。"></textarea>
<br>
<input type="password" id="decryptPassphrase" placeholder="パスワードを入力してください。">
<br>
<p>
<input class="optional" type="checkbox" id="verifyCheckbox" checked>
<label for="verifyCheckbox">署名を確認する。メッセージを送ったのが本当に私であることを確認するために、メッセージの署名を確認したいですか？このボックスのチェックを外す理由はない。常にチェックを入れておいてください！</label>
</p>
<br>
<div id="verifyOptions" style="display: none;">
<div style="display: none;">
<textarea class="optional" id="verifyPublicKey" placeholder="確認のため、私のＰＵＢＬＩＣキーを入力してください。"></textarea>
</div>
</div>
<br>
<button id="decryptButton" onclick="removePGPBlock('decryptPrivateKey')">クリックして復号化する</button>
<pre id="signature-status"></pre>
<p>あなたがファイルをダウンロードする代わりに表示することを選択した場合は、下に表示されます：</p>
<div id="fileContainer"></div>
</section>
</div>
</body>

#+END_EXPORT
